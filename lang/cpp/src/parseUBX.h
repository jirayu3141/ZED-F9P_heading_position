// File lang/cpp/src/parseUBX.h
// Auto-generated by pyUBX generateCpp.py v0.1 on 2020-09-09T14:11:58.943574
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __PARSEUBX_H__
#define __PARSEUBX_H__

#include "../src/parseUBXBase.h"
#include "messages/ACK.h"
#include "messages/CFG.h"
#include "messages/ESF.h"
#include "messages/MON.h"
#include "messages/NAV.h"
#include "messages/TEST.h"
#include "messages/TIM.h"

class ParseUBX : public ParseUBXBase
{
public:
    ParseUBX(char* const buf, const size_t BUFLEN) : ParseUBXBase(buf, BUFLEN) {};

private:
    void onUBX(uint8_t cls, uint8_t id, size_t len, char buf[]) {
        switch(cls) {
        case 0x05: // Message class ACK
            switch(id) {
            case 0x01: // Message ACK-ACK_
                onACK_ACK_(*((ACK::ACK_*)buf), len);
                break;
            case 0x00: // Message ACK-NAK
                onACK_NAK(*((ACK::NAK*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0x06: // Message class CFG
            switch(id) {
            case 0x3E: // Message CFG-GNSS
                onCFG_GNSS(*((CFG::GNSS*)buf), len);
                break;
            case 0x3B: // Message CFG-PM2
                onCFG_PM2(*((CFG::PM2*)buf), len);
                break;
            case 0x86: // Message CFG-PMS
                onCFG_PMS(*((CFG::PMS*)buf), len);
                break;
            case 0x00: // Message CFG-PRT
                onCFG_PRT(*((CFG::PRT*)buf), len);
                break;
            case 0x08: // Message CFG-RATE
                onCFG_RATE(*((CFG::RATE*)buf), len);
                break;
            case 0x11: // Message CFG-RXM
                onCFG_RXM(*((CFG::RXM*)buf), len);
                break;
            case 0x31: // Message CFG-TP5
                onCFG_TP5(*((CFG::TP5*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0x10: // Message class ESF
            switch(id) {
            case 0x02: // Message ESF-MEAS
                onESF_MEAS(*((ESF::MEAS*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0x0A: // Message class MON
            switch(id) {
            case 0x09: // Message MON-HW
                onMON_HW(*((MON::HW*)buf), len);
                break;
            case 0x04: // Message MON-VER
                onMON_VER(*((MON::VER*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0x01: // Message class NAV
            switch(id) {
            case 0x04: // Message NAV-DOP
                onNAV_DOP(*((NAV::DOP*)buf), len);
                break;
            case 0x07: // Message NAV-PVT
                onNAV_PVT(*((NAV::PVT*)buf), len);
                break;
            case 0x3C: // Message NAV-RELPOSNED
                onNAV_RELPOSNED(*((NAV::RELPOSNED*)buf), len);
                break;
            case 0x30: // Message NAV-SVINFO
                onNAV_SVINFO(*((NAV::SVINFO*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0xFF: // Message class TEST
            switch(id) {
            case 0xFF: // Message TEST-TEST_
                onTEST_TEST_(*((TEST::TEST_*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        case 0x0D: // Message class TIM
            switch(id) {
            case 0x04: // Message TIM-SVIN
                onTIM_SVIN(*((TIM::SVIN*)buf), len);
                break;
            default:
                onUBXerr(cls, id, len, NotImplemented);
            }
            break;
        default:
            onUBXerr(cls, id, len, NotImplemented);
        }
    }

public:
    /* callback for ACK::ACK_ messages */
    virtual void onACK_ACK_(ACK::ACK_& msg, size_t len) {}
    
    /* callback for ACK::NAK messages */
    virtual void onACK_NAK(ACK::NAK& msg, size_t len) {}
    
    /* callback for CFG::GNSS messages */
    virtual void onCFG_GNSS(CFG::GNSS& msg, size_t len) {}
    
    /* callback for CFG::PM2 messages */
    virtual void onCFG_PM2(CFG::PM2& msg, size_t len) {}
    
    /* callback for CFG::PMS messages */
    virtual void onCFG_PMS(CFG::PMS& msg, size_t len) {}
    
    /* callback for CFG::PRT messages */
    virtual void onCFG_PRT(CFG::PRT& msg, size_t len) {}
    
    /* callback for CFG::RATE messages */
    virtual void onCFG_RATE(CFG::RATE& msg, size_t len) {}
    
    /* callback for CFG::RXM messages */
    virtual void onCFG_RXM(CFG::RXM& msg, size_t len) {}
    
    /* callback for CFG::TP5 messages */
    virtual void onCFG_TP5(CFG::TP5& msg, size_t len) {}
    
    /* callback for ESF::MEAS messages */
    virtual void onESF_MEAS(ESF::MEAS& msg, size_t len) {}
    
    /* callback for MON::HW messages */
    virtual void onMON_HW(MON::HW& msg, size_t len) {}
    
    /* callback for MON::VER messages */
    virtual void onMON_VER(MON::VER& msg, size_t len) {}
    
    /* callback for NAV::DOP messages */
    virtual void onNAV_DOP(NAV::DOP& msg, size_t len) {}
    
    /* callback for NAV::PVT messages */
    virtual void onNAV_PVT(NAV::PVT& msg, size_t len) {}
    
    /* callback for NAV::RELPOSNED messages */
    virtual void onNAV_RELPOSNED(NAV::RELPOSNED& msg, size_t len) {}
    
    /* callback for NAV::SVINFO messages */
    virtual void onNAV_SVINFO(NAV::SVINFO& msg, size_t len) {}
    
    /* callback for TEST::TEST_ messages */
    virtual void onTEST_TEST_(TEST::TEST_& msg, size_t len) {}
    
    /* callback for TIM::SVIN messages */
    virtual void onTIM_SVIN(TIM::SVIN& msg, size_t len) {}
    
private:
    ParseUBX();
};

#endif // #define __PARSEUBX_H__

